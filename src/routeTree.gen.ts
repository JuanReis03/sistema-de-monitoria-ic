/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as DeferredImport } from './routes/deferred'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as IndexImport } from './routes/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as HomeSettingsImport } from './routes/home/settings'
import { Route as HomeProjectsImport } from './routes/home/projects'
import { Route as HomeProfileImport } from './routes/home/profile'
import { Route as HomeLayoutImport } from './routes/home/_layout'
import { Route as AuthCasCallbackImport } from './routes/auth/cas-callback'
import { Route as AuthLayoutImport } from './routes/auth/_layout'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'

// Create Virtual Routes

const HomeImport = createFileRoute('/home')()
const AuthImport = createFileRoute('/auth')()

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRoute,
} as any)

const HomeSettingsRoute = HomeSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => HomeRoute,
} as any)

const HomeProjectsRoute = HomeProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => HomeRoute,
} as any)

const HomeProfileRoute = HomeProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => HomeRoute,
} as any)

const HomeLayoutRoute = HomeLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => HomeRoute,
} as any)

const AuthCasCallbackRoute = AuthCasCallbackImport.update({
  id: '/cas-callback',
  path: '/cas-callback',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/auth/_layout': {
      id: '/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof AuthRoute
    }
    '/auth/cas-callback': {
      id: '/auth/cas-callback'
      path: '/cas-callback'
      fullPath: '/auth/cas-callback'
      preLoaderRoute: typeof AuthCasCallbackImport
      parentRoute: typeof AuthImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/home/_layout': {
      id: '/home/_layout'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeLayoutImport
      parentRoute: typeof HomeRoute
    }
    '/home/profile': {
      id: '/home/profile'
      path: '/profile'
      fullPath: '/home/profile'
      preLoaderRoute: typeof HomeProfileImport
      parentRoute: typeof HomeImport
    }
    '/home/projects': {
      id: '/home/projects'
      path: '/projects'
      fullPath: '/home/projects'
      preLoaderRoute: typeof HomeProjectsImport
      parentRoute: typeof HomeImport
    }
    '/home/settings': {
      id: '/home/settings'
      path: '/settings'
      fullPath: '/home/settings'
      preLoaderRoute: typeof HomeSettingsImport
      parentRoute: typeof HomeImport
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof HomeImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
  }
}

// Create and export the route tree

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRoute
  AuthCasCallbackRoute: typeof AuthCasCallbackRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRoute,
  AuthCasCallbackRoute: AuthCasCallbackRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface HomeRouteChildren {
  HomeLayoutRoute: typeof HomeLayoutRoute
  HomeProfileRoute: typeof HomeProfileRoute
  HomeProjectsRoute: typeof HomeProjectsRoute
  HomeSettingsRoute: typeof HomeSettingsRoute
  HomeIndexRoute: typeof HomeIndexRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeLayoutRoute: HomeLayoutRoute,
  HomeProfileRoute: HomeProfileRoute,
  HomeProjectsRoute: HomeProjectsRoute,
  HomeSettingsRoute: HomeSettingsRoute,
  HomeIndexRoute: HomeIndexRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/auth': typeof AuthLayoutRoute
  '/auth/cas-callback': typeof AuthCasCallbackRoute
  '/home': typeof HomeLayoutRoute
  '/home/profile': typeof HomeProfileRoute
  '/home/projects': typeof HomeProjectsRoute
  '/home/settings': typeof HomeSettingsRoute
  '/home/': typeof HomeIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/auth': typeof AuthLayoutRoute
  '/auth/cas-callback': typeof AuthCasCallbackRoute
  '/home': typeof HomeIndexRoute
  '/home/profile': typeof HomeProfileRoute
  '/home/projects': typeof HomeProjectsRoute
  '/home/settings': typeof HomeSettingsRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/auth/_layout': typeof AuthLayoutRoute
  '/auth/cas-callback': typeof AuthCasCallbackRoute
  '/home': typeof HomeRouteWithChildren
  '/home/_layout': typeof HomeLayoutRoute
  '/home/profile': typeof HomeProfileRoute
  '/home/projects': typeof HomeProjectsRoute
  '/home/settings': typeof HomeSettingsRoute
  '/home/': typeof HomeIndexRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/deferred'
    | '/redirect'
    | '/auth'
    | '/auth/cas-callback'
    | '/home'
    | '/home/profile'
    | '/home/projects'
    | '/home/settings'
    | '/home/'
    | '/route-a'
    | '/route-b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/deferred'
    | '/redirect'
    | '/auth'
    | '/auth/cas-callback'
    | '/home'
    | '/home/profile'
    | '/home/projects'
    | '/home/settings'
    | '/route-a'
    | '/route-b'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/deferred'
    | '/redirect'
    | '/_pathlessLayout/_nested-layout'
    | '/auth'
    | '/auth/_layout'
    | '/auth/cas-callback'
    | '/home'
    | '/home/_layout'
    | '/home/profile'
    | '/home/projects'
    | '/home/settings'
    | '/home/'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
  AuthRoute: typeof AuthRouteWithChildren
  HomeRoute: typeof HomeRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
  AuthRoute: AuthRouteWithChildren,
  HomeRoute: HomeRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pathlessLayout",
        "/deferred",
        "/redirect",
        "/auth",
        "/home"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/auth": {
      "filePath": "auth",
      "children": [
        "/auth/_layout",
        "/auth/cas-callback"
      ]
    },
    "/auth/_layout": {
      "filePath": "auth/_layout.tsx",
      "parent": "/auth"
    },
    "/auth/cas-callback": {
      "filePath": "auth/cas-callback.tsx",
      "parent": "/auth"
    },
    "/home": {
      "filePath": "home",
      "children": [
        "/home/_layout",
        "/home/profile",
        "/home/projects",
        "/home/settings",
        "/home/"
      ]
    },
    "/home/_layout": {
      "filePath": "home/_layout.tsx",
      "parent": "/home"
    },
    "/home/profile": {
      "filePath": "home/profile.tsx",
      "parent": "/home"
    },
    "/home/projects": {
      "filePath": "home/projects.tsx",
      "parent": "/home"
    },
    "/home/settings": {
      "filePath": "home/settings.tsx",
      "parent": "/home"
    },
    "/home/": {
      "filePath": "home/index.tsx",
      "parent": "/home"
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    }
  }
}
ROUTE_MANIFEST_END */
